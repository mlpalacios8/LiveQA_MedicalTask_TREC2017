### Actual script used in the final deployment ###

from openai import OpenAI
import json
import requests
import logging
# import joblib
from azure.keyvault.secrets import SecretClient
from azure.identity import DefaultAzureCredential

def init():
    """
    This function initializes the environment variables required for the OpenAI API and the you.com API.
    It sets the global variables openAI_client, you_API_key, and openAI_model.
    """
    # Setting the environment variables which are required for the OpenAI API and you.com API
    global openAI_client, you_API_key, openAI_model

    KVUri = f"https://marcelplaygrou6139287083.vault.azure.net"

    credential = DefaultAzureCredential()
    KVClient = SecretClient(vault_url=KVUri, credential=credential)

    OPENAI_API_KEY = "OPENAI-API-KEY"
    YOU_API_KEY = "YOU-API-KEY"

    OPENAI_API_KEY = KVClient.get_secret(OPENAI_API_KEY).value
    YOU_API_KEY = KVClient.get_secret(YOU_API_KEY).value

    openAI_client = OpenAI(api_key=OPENAI_API_KEY)
    openAI_model = "gpt-4o-mini"
    you_API_key = YOU_API_KEY
    print("Init complete")

def run(raw_json_question):
    """
    This function takes a medical question as input and returns an answer to the question.
    The answer is generated using the OpenAI API and the you.com websearch API.
    It also classifies the question into one of 23 medical categories and identifies the focus of the question to search the web.
    """
    data = json.loads(raw_json_question)
    question = data['question']
    print(f"\nReceived question: {question}")
    try:
        category, search_query, web_snippets, answer, complete_answer = answer_question(question)
        print("\nQuestion processed successfully")
        print(f"\nCategory of the question: {category}")
        print(f"\nSearch Focus Query: {search_query}")
        print(f"\nAnswer: {answer}")
        print(f"\n\nWeb Snippets backing up the answer:\n\n {web_snippets}")
        # Return the complete answer as a string or inside a JSON
        return json.dumps({"response": complete_answer})
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return json.dumps({"error": str(e)})

def get_ai_web_snippets_for_query(query):
    """ 
    This function uses the you.com search API to get the top 10 search results for a given query.
    The results are returned as a list of dictionaries, where each dictionary contains the title, snippet, and URL of a search result.
    """
    headers = {"X-API-Key": you_API_key}
    params = {"num_web_results":"10","query": query}
    web_snippet_json = requests.get(
        f"https://api.ydc-index.io/search?query={query}",
        params=params,
        headers=headers,
    ).json()
    web_snippet = json.dumps(web_snippet_json)

    return web_snippet

def get_response_OpenAI(prompt):
    """
    This function uses the OpenAI API to generate a response to a given prompt.
    The prompt is a list of dictionaries, where each dictionary contains the role and content of a message.
    The response is the content of the message generated by the OpenAI model.
    """
    completion = openAI_client.chat.completions.create(
        model=openAI_model,
        messages=prompt,
        temperature=0,
    )

    return completion.choices[0].message.content

def classify_question(question: str):
    """
    This function uses the OpenAI API to classify a given question into one of 23 medical categories.
    The question is classified based on the content of the question.
    The category is returned as a string.
    """
    system_message = """
    You are a helpful medical assistant. Classify the provided question into one of the 23 categories listed below. Only return the category name.

    23 Categories:

    Association
    Cause
    Complication
    Contraindication
    Diagnosis
    Dosage
    Genetic changes
    Indication
    Information
    Ingredient
    Inheritance
    Interaction
    Organization
    Prevention
    Prognosis
    Resources
    Side effects
    Storage and disposal
    Susceptibility
    Symptom
    Tapering
    Treatment
    Usage
    """
    message_text = [{"role":"system","content":system_message},
                    {"role":"user","content":question}]
    category_of_question = get_response_OpenAI(prompt=message_text)

    return category_of_question

def get_question_focus_to_search_web(question: str):
    system_message = """
    You are a helpful medical assistant. Identify the focus of the question and provide a search query that can be used to find more information in the internet. Only return the search query.

    Example: "What is the treatment for diabetes?" -> "treatment for diabetes"
    """
    message_text = [{"role":"system","content":system_message},
                    {"role":"user","content":question}]
    search_query = get_response_OpenAI(prompt=message_text)

    # Remove the "" from the search query
    search_query = search_query.replace('"', '')

    return search_query

def get_answer_question_with_web_snippets(question: str, web_snippets: str):
    """
    This function generates an answer to a given question using the OpenAI API and the web snippets provided.
    The answer is generated based on the question and the content of the web snippets.
    The answer is returned as a string and contains the relevant URLs from the web snippets.
    """
    base_system_message = """
    You are a helpful medical assistant. Generate an answer to the provided question using the web snippets provided below and your medical knowledge.
    Make sure the answer is relevant to the question and is supported by the web snippets. The web snippets are in JSON format.
    Only return the answer and useful supportive URLs.

    ### WEB SNIPPETS ###
    """
    system_message = base_system_message + "\n\n" + web_snippets
    message_text = [{"role":"system","content":system_message},
                    {"role":"user","content":question}]
    answer = get_response_OpenAI(prompt=message_text)

    return answer

def answer_question(question: str):
    """
    This function takes a medical question as input and returns an answer to the question.
    The answer is generated using the OpenAI API and the you.com websearch API.
    It also classifies the question into one of 23 medical categories and identifies the focus of the question to search the web.
    """
    # Classify the question into one of the 23 medical categories
    category = classify_question(question)
    
    # Identify the focus of the question to search the web
    search_query = get_question_focus_to_search_web(question)
    
    # Get web snippets for the search query
    web_snippets = get_ai_web_snippets_for_query(search_query)
    
    # Generate an answer using the OpenAI API and the web snippets
    answer = get_answer_question_with_web_snippets(question, web_snippets)
    
    complete_answer = f"Category of question: {category}\nSearch Query and focus of the question: {search_query}\nAnswer: {answer}"

    return category, search_query, web_snippets, answer, complete_answer
